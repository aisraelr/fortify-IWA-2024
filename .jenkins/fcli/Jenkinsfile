pipeline {
    agent any

    environment {
        // Ajusta según tu release de FoD
        FOD_RELEASE_ID = "1388854"
        FOD_SESSION    = "jenkins"
        SCAN_STORE     = "curScan"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo "📂 Checking out source code..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/main"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: 'GitHub',   // <- Usa tu credencial correcta
                        url: 'https://github.com/aisraelr/fortify-IWA-2024.git'
                    ]]
                ])
            }
        }

        stage('FoD SAST Scan') {
            steps {
                echo "🚀 Starting FoD SAST scan..."
                bat """
                    fcli.exe fod sast-scan start ^
                        --rel %FOD_RELEASE_ID% ^
                        --file "target\\iwa.jar" ^
                        --fod-session %FOD_SESSION% ^
                        --store %SCAN_STORE% ^
                        --output json > curScan.json 2> curScan.err
                """
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                echo "⏳ Waiting for FoD scan to complete..."
                bat """
                    fcli.exe fod scan wait-for ^
                        --scan-session %SCAN_STORE% ^
                        --fod-session %FOD_SESSION% ^
                        --store waitScan ^
                        --output json > waitScan.json 2> waitScan.err
                """
            }
        }

        stage('Get Scan Results') {
            steps {
                echo "📊 Getting FoD scan results..."
                bat """
                    fcli.exe fod scan get-results ^
                        --scan-session %SCAN_STORE% ^
                        --fod-session %FOD_SESSION% ^
                        --output json > scanResults.json 2> scanResults.err
                """
                archiveArtifacts artifacts: 'scanResults.json', fingerprint: true
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully!"
        }
        failure {
            echo "❌ Pipeline failed!"
        }
        always {
            echo "🧹 Cleaning up..."
            bat 'del /Q curScan.json curScan.err waitScan.json waitScan.err scanResults.err 2>nul || exit 0'
        }
    }
}

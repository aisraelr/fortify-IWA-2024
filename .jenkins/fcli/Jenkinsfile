#!/usr/bin/env groovy

// Variables globales para persistir los Scan IDs entre stages y post
def GLOBAL_SCAN_ID_SAST = ""
def GLOBAL_SCAN_ID_OSS = ""

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true, description: 'Run Fortify on Demand SAST scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com', description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1388854', description: 'FoD Release ID')
        string(name: 'CRITICAL_THRESHOLD', defaultValue: '0', description: 'Fail pipeline if critical issues exceed this count')
        string(name: 'HIGH_THRESHOLD', defaultValue: '10', description: 'Fail pipeline if high issues exceed this count')
        string(name: 'SCAN_TIMEOUT_MINUTES', defaultValue: '120', description: 'Timeout in minutes for single wait-for attempt')
        string(name: 'WAIT_RETRIES', defaultValue: '2', description: 'Number of additional wait-for retry attempts')
        string(name: 'WAIT_RETRY_DELAY_MINUTES', defaultValue: '2', description: 'Minutes to wait between retries')

        string(name: 'OSS_CRITICAL_THRESHOLD', defaultValue: '0', description: 'Fail pipeline if OSS critical issues exceed this count')
        string(name: 'OSS_HIGH_THRESHOLD', defaultValue: '10', description: 'Fail pipeline if OSS high issues exceed this count')
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
        GIT_REPO_NAME  = "fortify-IWA-2024"
    }

    stages {

        stage('Initialize') {
            steps {
                script {
                    env.GIT_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_BRANCH = bat(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
            }
        }

        stage('Prepare fcli') {
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    bat """
                        @echo off
                        if not exist "${FCLI_HOME}" mkdir "${FCLI_HOME}"
                        if not exist "${FCLI_HOME}\\fcli.exe" (
                            echo [INFO] Descargando fcli...
                            curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o "${FCLI_HOME}\\fcli-windows.zip"
                            tar -xf "${FCLI_HOME}\\fcli-windows.zip" -C "${FCLI_HOME}" fcli.exe
                        ) else (
                            echo [INFO] fcli.exe ya existe en ${FCLI_HOME}
                        )
                    """
                }
            }
        }

        stage('FoD SAST Scan') {
            steps {
                script {
                    if (!params.FOD_SAST) {
                        echo "FoD SAST deshabilitado."
                    } else {
                        def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                        withCredentials([
                            string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                            string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                        ]) {
                            bat """
                                @echo off
                                echo [INFO] Logging into FoD...
                                "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins

                                echo [INFO] Uploading artifact...
                                "${FCLI_HOME}\\fcli.exe" fod sast-scan start --rel "${params.FOD_RELEASE_ID}" --file target\\iwa.jar --fod-session jenkins --output json > sast-output.json

                                echo [INFO] Logging out...
                                "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                            """
                            def output = readFile('sast-output.json')
                            GLOBAL_SCAN_ID_SAST = parseScanId(output, 'Static')
                            echo "✅ Scan ID SAST: ${GLOBAL_SCAN_ID_SAST}"
                            currentBuild.displayName = "#${BUILD_NUMBER} - SAST ${GLOBAL_SCAN_ID_SAST}"
                        }
                    }
                }
            }
        }

        stage('Wait for SAST Scan Completion') {
            steps {
                script {
                    if (params.FOD_SAST && GLOBAL_SCAN_ID_SAST) {
                        waitForScan('SAST', GLOBAL_SCAN_ID_SAST, params.SCAN_TIMEOUT_MINUTES.toInteger(), params.WAIT_RETRIES.toInteger(), params.WAIT_RETRY_DELAY_MINUTES.toInteger())
                    }
                }
            }
        }

        stage('Validate SAST Results') {
            steps {
                script {
                    if (params.FOD_SAST && GLOBAL_SCAN_ID_SAST) {
                        validateScanResults('sast-output.json', params.CRITICAL_THRESHOLD.toInteger(), params.HIGH_THRESHOLD.toInteger())
                    }
                }
            }
        }

        stage('Prepare OSS Package') {
            steps {
                script {
                    bat """
                        @echo off
                        echo [INFO] Generando paquete OSS con ScanCentral...
                        if exist oss-scan.zip del oss-scan.zip
                        scancentral.bat package -bt mvn -oss -o oss-scan.zip
                    """
                }
            }
        }

        stage('FoD OSS Scan') {
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            echo [INFO] Logging into FoD for OSS Scan...
                            "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins

                            echo [INFO] Starting OSS Scan...
                            "${FCLI_HOME}\\fcli.exe" fod oss-scan start --rel "${params.FOD_RELEASE_ID}" --file "oss-scan.zip" --fod-session jenkins --output json > oss-output.json

                            echo [INFO] Logging out...
                            "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                        """
                        def output = readFile('oss-output.json')
                        GLOBAL_SCAN_ID_OSS = parseScanId(output, 'OpenSource')
                        echo "✅ Scan ID OSS: ${GLOBAL_SCAN_ID_OSS}"
                    }
                }
            }
        }

        stage('Wait for OSS Scan Completion') {
            steps {
                script {
                    if (GLOBAL_SCAN_ID_OSS) {
                        waitForScan('OSS', GLOBAL_SCAN_ID_OSS, params.SCAN_TIMEOUT_MINUTES.toInteger(), params.WAIT_RETRIES.toInteger(), params.WAIT_RETRY_DELAY_MINUTES.toInteger())
                    }
                }
            }
        }

        stage('Validate OSS Results') {
            steps {
                script {
                    if (GLOBAL_SCAN_ID_OSS) {
                        validateScanResults('oss-output.json', params.OSS_CRITICAL_THRESHOLD.toInteger(), params.OSS_HIGH_THRESHOLD.toInteger())
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "📋 RESUMEN EJECUCIÓN"
                echo "   Status: ${currentBuild.currentResult}"
                echo "   SAST Scan ID: ${GLOBAL_SCAN_ID_SAST ?: 'N/A'}"
                echo "   OSS Scan ID: ${GLOBAL_SCAN_ID_OSS ?: 'N/A'}"
            }
        }
    }
}

// Funciones auxiliares

def parseScanId(String output, String scanType) {
    def json = readJSON text: output
    def obj = json instanceof List ? json[0] : json
    if (obj.scanType == scanType && obj.scanId) {
        return obj.scanId.toString()
    }
    return null
}

def waitForScan(String type, String scanId, int timeoutMinutes, int retries, int delayMinutes) {
    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
    boolean success = false
    int attempts = 1 + retries

    withCredentials([
        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
    ]) {
        for (int i = 1; i <= attempts; i++) {
            echo "🔁 Wait-for ${type} attempt ${i}/${attempts} (timeout ${timeoutMinutes}m)..."
            def rc = bat(script: """
                @echo off
                "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                "${FCLI_HOME}\\fcli.exe" fod ${type == 'SAST' ? 'sast-scan' : 'oss-scan'} wait-for ${scanId} --fod-session jenkins --timeout ${timeoutMinutes}m --output json > wait-${type.toLowerCase()}.json
                "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
            """, returnStatus: true)
            if (rc == 0) { success = true; break }
            if (i < attempts) { sleep time: delayMinutes, unit: 'MINUTES' }
        }
    }

    if (!success) {
        error "❌ Wait-for ${type} scan ${scanId} failed after ${attempts} attempts"
    }
}

def validateScanResults(String filePath, int criticalThreshold, int highThreshold) {
    if (!fileExists(filePath)) { error "❌ No se encontró ${filePath}" }
    def jsonText = readFile(filePath)
    def json = readJSON text: jsonText
    def obj = json instanceof List ? json[0] : json
    def status = obj.analysisStatusType ?: 'Unknown'
    def critical = obj.issueCountCritical ?: 0
    def high = obj.issueCountHigh ?: 0

    echo "📊 Scan Results (${filePath})"
    echo "   Status: ${status}"
    echo "   Critical: ${critical} (Threshold: ${criticalThreshold})"
    echo "   High: ${high} (Threshold: ${highThreshold})"

    if (critical > criticalThreshold) { error "❌ Critical issues (${critical}) > threshold (${criticalThreshold})" }
    if (high > highThreshold) { error "❌ High issues (${high}) > threshold (${highThreshold})" }

    echo "✅ Scan passed"
}

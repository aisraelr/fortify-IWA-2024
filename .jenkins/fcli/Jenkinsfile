#!/usr/bin/env groovy

// Variables globales para persistir Scan IDs entre stages y en post
def GLOBAL_SAST_SCAN_ID = ""
def GLOBAL_OSS_SCAN_ID  = ""

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true,
            description: 'Run Fortify on Demand SAST scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com',
            description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1388854',
            description: 'FoD Release ID')
        string(name: 'CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if critical issues exceed this count')
        string(name: 'HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if high issues exceed this count')
        string(name: 'SCAN_TIMEOUT_MINUTES', defaultValue: '120',
            description: 'Timeout in minutes for single wait-for attempt')
        string(name: 'WAIT_RETRIES', defaultValue: '2',
            description: 'Number of additional wait-for retry attempts (after the first one)')
        string(name: 'WAIT_RETRY_DELAY_MINUTES', defaultValue: '2',
            description: 'Minutes to wait between retries')
        //
        string(name: 'OSS_CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if OSS critical issues exceed this count')
        string(name: 'OSS_HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if OSS high issues exceed this count')        
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
        GIT_REPO_NAME  = "fortify-IWA-2024"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.GIT_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_BRANCH = bat(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()

                    env.CRITICAL_THRESHOLD_INT = params.CRITICAL_THRESHOLD.toInteger()
                    env.HIGH_THRESHOLD_INT = params.HIGH_THRESHOLD.toInteger()
                    env.SCAN_TIMEOUT_MINUTES_INT = params.SCAN_TIMEOUT_MINUTES.toInteger()
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
            }
        }

        stage('Prepare fcli') {
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    bat """
                        @echo off
                        if not exist "${FCLI_HOME}" mkdir "${FCLI_HOME}"
                        if not exist "${FCLI_HOME}\\fcli.exe" (
                            echo [INFO] Descargando fcli...
                            curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o "${FCLI_HOME}\\fcli-windows.zip"
                            tar -xf "${FCLI_HOME}\\fcli-windows.zip" -C "${FCLI_HOME}" fcli.exe
                        ) else (
                            echo [INFO] fcli.exe ya existe en ${FCLI_HOME}
                        )
                    """
                }
            }
        }

        stage('FoD SAST Scan') {
            steps {
                script {
                    if (!params.FOD_SAST) {
                        echo "FoD SAST deshabilitado por par√°metro. Saltando."
                    } else {
                        def FCLI_HOME = "${env.WORKSPACE}\\fcli"

                        withCredentials([
                            string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                            string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                        ]) {
                            bat """
                                @echo off
                                echo [INFO] Logging into FoD...
                                "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins

                                echo [INFO] Uploading artifact...
                                "${FCLI_HOME}\\fcli.exe" fod sast-scan start --rel "${params.FOD_RELEASE_ID}" --file target\\iwa.jar --fod-session jenkins > scan_output.txt

                                echo [INFO] Logging out...
                                "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                            """

                            def scanOutput = readFile('scan_output.txt')
                            echo "Scan Output:\n${scanOutput}"

                            GLOBAL_SAST_SCAN_ID = extractScanId(scanOutput)
                            if (!GLOBAL_SAST_SCAN_ID) {
                                error "‚ùå No se pudo extraer el Scan ID del output"
                            }
                            echo "‚úÖ SAST Scan ID capturado: ${GLOBAL_SAST_SCAN_ID}"
                            currentBuild.displayName = "#${BUILD_NUMBER} - SAST Scan ${GLOBAL_SAST_SCAN_ID}"
                        }
                    }
                }
            }
        }

        stage('Wait for SAST Scan Completion') {
            steps {
                script {
                    if (!params.FOD_SAST) {
                        echo "FoD SAST deshabilitado, saltando Wait."
                    } else if (!GLOBAL_SAST_SCAN_ID) {
                        error "‚ùå GLOBAL_SAST_SCAN_ID no definido."
                    } else {
                        def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                        int retries = params.WAIT_RETRIES.toInteger()
                        int delayMin = params.WAIT_RETRY_DELAY_MINUTES.toInteger()
                        int maxAttempts = 1 + retries
                        boolean success = false

                        withCredentials([
                            string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                            string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                        ]) {
                            for (int attempt = 1; attempt <= maxAttempts; attempt++) {
                                echo "üîÅ Wait-for attempt ${attempt} of ${maxAttempts}..."
                                def rc = bat(script: """
                                    @echo off
                                    "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                                    "${FCLI_HOME}\\fcli.exe" fod sast-scan wait-for ${GLOBAL_SAST_SCAN_ID} --fod-session jenkins --timeout ${params.SCAN_TIMEOUT_MINUTES}m --output json > last-scan.json
                                    "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                                """, returnStatus: true)

                                if (rc == 0) {
                                    echo "‚úÖ wait-for SAST succeeded on attempt ${attempt}"
                                    success = true
                                    break
                                } else if (attempt < maxAttempts) {
                                    echo "‚è≥ Esperando ${delayMin} minutos antes de reintentar..."
                                    sleep time: delayMin, unit: 'MINUTES'
                                }
                            }
                        }

                        if (!success) {
                            if (fileExists('last-scan.json')) echo readFile('last-scan.json')
                            error "‚ùå El SAST scan no finaliz√≥ despu√©s de ${maxAttempts} intentos."
                        }
                    }
                }
            }
        }

        stage('Validate SAST Results') {
            steps {
                script {
                    if (!params.FOD_SAST) {
                        echo "FoD SAST deshabilitado, saltando Validaci√≥n."
                    } else if (!fileExists('last-scan.json')) {
                        error "‚ùå No se encontr√≥ last-scan.json con resultados."
                    } else {
                        def rawText = readFile('last-scan.json')
                        def jsonStart = rawText.indexOf('[')
                        if (jsonStart < 0) error "‚ùå No se encontr√≥ bloque JSON en last-scan.json"
                        def jsonText = rawText.substring(jsonStart).trim()
                        def scanResults = readJSON text: jsonText
                        def result = scanResults[0]

                        echo "üìä SAST SCAN RESULTS for ID: ${GLOBAL_SAST_SCAN_ID}"
                        echo "   Status: ${result.analysisStatusType ?: 'Unknown'}"
                        echo "   Critical Issues: ${result.issueCountCritical ?: 0}"
                        echo "   High Issues: ${result.issueCountHigh ?: 0}"

                        if ((result.issueCountCritical ?: 0) > params.CRITICAL_THRESHOLD.toInteger()) error "‚ùå Critical issues exceden el umbral"
                        if ((result.issueCountHigh ?: 0) > params.HIGH_THRESHOLD.toInteger()) error "‚ùå High issues exceden el umbral"
                    }
                }
            }
        }

        stage('Prepare OSS Package') {
            steps {
                script {
                    bat """
                        @echo off
                        if exist oss-scan.zip del oss-scan.zip
                        scancentral.bat package -bt mvn -oss -o oss-scan.zip
                    """
                }
            }
        }

        stage('FoD OSS Scan') {
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                            "${FCLI_HOME}\\fcli.exe" fod oss-scan start --rel "${params.FOD_RELEASE_ID}" --file "oss-scan.zip" --fod-session jenkins --output json > oss-scan-output.json
                            "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                        """
                        if (fileExists('oss-scan-output.json')) {
                            def ossResults = readFile('oss-scan-output.json')
                            echo "OSS Scan Output:\n${ossResults}"
                            GLOBAL_OSS_SCAN_ID = extractScanId(ossResults)
                            echo "‚úÖ OSS Scan ID capturado: ${GLOBAL_OSS_SCAN_ID}"
                        } else {
                            echo "‚ö†Ô∏è No se gener√≥ oss-scan-output.json"
                        }
                    }
                }
            }
        }

        stage('Validate OSS Results') {
            steps {
                script {
                    if (!fileExists('oss-scan-output.json')) error "‚ùå No se encontr√≥ oss-scan-output.json"
                    def rawText = readFile('oss-scan-output.json')
                    def jsonStart = rawText.indexOf('[')
                    if (jsonStart < 0) error "‚ùå No se encontr√≥ bloque JSON en oss-scan-output.json"
                    def jsonText = rawText.substring(jsonStart).trim()
                    def ossResults = readJSON text: jsonText
                    def result = ossResults[0]

                    echo "üìä OSS SCAN RESULTS for ID: ${GLOBAL_OSS_SCAN_ID}"
                    echo "   Status: ${result.analysisStatusType ?: 'Unknown'}"
                    echo "   Critical Issues: ${result.issueCountCritical ?: 0}"
                    echo "   High Issues: ${result.issueCountHigh ?: 0}"

                    if ((result.issueCountCritical ?: 0) > params.OSS_CRITICAL_THRESHOLD.toInteger()) error "‚ùå OSS Critical issues exceden el umbral"
                    if ((result.issueCountHigh ?: 0) > params.OSS_HIGH_THRESHOLD.toInteger()) error "‚ùå OSS High issues exceden el umbral"
                }
            }
        }
    }

    post {
        always {
            script {
                def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                echo "üìã RESUMEN EJECUCI√ìN"
                echo "   Status: ${currentBuild.currentResult}"
                echo "   SAST Scan ID: ${GLOBAL_SAST_SCAN_ID ?: 'N/A'}"
                echo "   OSS Scan ID: ${GLOBAL_OSS_SCAN_ID ?: 'N/A'}"
                echo "   FoD Portal: ${params.FOD_URL}"

                if (fileExists('last-scan.json')) echo readFile('last-scan.json')
                if (fileExists('oss-scan-output.json')) echo readFile('oss-scan-output.json')

                bat """
                    @echo off
                    if exist "${FCLI_HOME}\\fcli-windows.zip" del "${FCLI_HOME}\\fcli-windows.zip"
                    if exist "${FCLI_HOME}\\fcli.exe" del "${FCLI_HOME}\\fcli.exe"
                    if exist scan_output.txt del scan_output.txt
                    if exist last-scan.json del last-scan.json
                    if exist oss-scan-output.json del oss-scan-output.json
                """
                cleanWs()
            }
        }

        success { echo "‚úÖ PIPELINE EXITOSO" }
        failure { echo "‚ùå PIPELINE FALLIDO" }
    }
}

// Funci√≥n para extraer Scan ID
def extractScanId(String output) {
    echo "Buscando Scan ID en el output..."
    if (!output) return null
    def lines = output.split('\\r?\\n')
    for (line in lines) {
        if (line?.toLowerCase()?.contains('pending')) {
            def parts = line.trim().split('\\s+')
            for (part in parts) if (part?.isNumber() && part.length() >= 7) return part.toString().trim()
        }
    }
    def fallback = (output =~ /\\b(\\d{7,})\\b/)
    if (fallback.find()) return fallback.group(1)
    return null
}

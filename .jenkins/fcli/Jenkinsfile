#!/usr/bin/env groovy

pipeline {
    agent any

    parameters {
        string(name: 'FOD_RELEASE_ID', defaultValue: '1388854', description: 'Fortify on Demand Release ID')
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build')
        string(name: 'MVN_GOALS', defaultValue: 'clean package -DskipTests', description: 'Maven build goals')
    }

    environment {
        FCLI_HOME = 'C:\\fcli'
        PATH = "${env.PATH};${env.FCLI_HOME}"
        FCLI_VERSION = 'v3.8.1'   // Cambia aqu√≠ cuando salga nueva versi√≥n
    }

    stages {
        stage('Setup FCLI') {
            steps {
                script {
                    if (!fileExists("${env.FCLI_HOME}\\fcli.exe")) {
                        echo "‚öôÔ∏è fcli not found. Downloading..."
                        bat """
                            mkdir ${env.FCLI_HOME} 2>nul
                            powershell -Command "Invoke-WebRequest -Uri https://github.com/fortify/fcli/releases/download/${env.FCLI_VERSION}/fcli-windows.zip -OutFile ${env.FCLI_HOME}\\fcli.zip"
                            powershell -Command "Expand-Archive -Force ${env.FCLI_HOME}\\fcli.zip ${env.FCLI_HOME}"
                            del ${env.FCLI_HOME}\\fcli.zip
                        """
                    } else {
                        echo "‚úÖ fcli already installed at ${env.FCLI_HOME}"
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                echo "üì• Checking out branch: ${params.BRANCH_NAME}"
                checkout([$class: 'GitSCM',
                          branches: [[name: "*/${params.BRANCH_NAME}"]],
                          userRemoteConfigs: [[url: scm.userRemoteConfigs[0].url]]])
            }
        }

        stage('Build') {
            steps {
                echo "‚öíÔ∏è Running Maven build with goals: ${params.MVN_GOALS}"
                bat "mvn ${params.MVN_GOALS}"
            }
        }

        stage('FoD SAST Scan') {
        steps {
            echo "üõ† Starting FoD SAST scan..."
            bat """
            fcli.exe fod sast-scan start ^
                --rel ${FOD_RELEASE_ID} ^
                --file "target\\iwa.jar" ^
                --fod-session jenkins ^
                --store curScan ^
                --output json > curScan_raw.txt 2>curScan.err
            """
            // Extraer solo el JSON al final del archivo
            powershell """
            Get-Content curScan_raw.txt | Select-String -Pattern '^{.*' | Set-Content curScan.json
            """
            script {
            def curScan = readJSON file: 'curScan.json'
            echo "Scan started: ${curScan.scanId}"
            }
        }
        }


        stage('Wait for Scan Completion') {
            steps {
                echo "‚è≥ Waiting for scan completion..."
                bat """
                    fcli.exe fod sast-scan wait-for --scan ${env.SCAN_ID} --fod-session jenkins
                """
            }
        }

        stage('Get Scan Results') {
            steps {
                echo "üì• Fetching scan results..."
                bat """
                    fcli.exe fod sast-scan get ${env.SCAN_ID} --fod-session jenkins --output json > scanResult.json 2>scanResult.err
                """
                script {
                    def resultContent = readFile('scanResult.json').trim()
                    if (!resultContent.startsWith("{")) {
                        echo "‚ùå fcli did not return JSON for results."
                        echo "---- scanResult.json ----"
                        echo resultContent
                        echo "---- scanResult.err ----"
                        echo readFile('scanResult.err')
                        error("FoD SAST scan results fetch failed. See above error.")
                    }
                    def scanResult = readJSON text: resultContent
                    echo "üìä Scan Result: ${scanResult}"
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
        }
    }
}

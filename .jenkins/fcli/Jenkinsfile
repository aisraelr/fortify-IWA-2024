#!/usr/bin/env groovy

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true,
            description: 'Run Fortify on Demand SAST scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com', 
            description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1503133', 
            description: 'FoD Release ID')
        string(name: 'CRITICAL_THRESHOLD', defaultValue: '0', 
            description: 'Fail pipeline if critical issues exceed this count')
        string(name: 'HIGH_THRESHOLD', defaultValue: '10', 
            description: 'Fail pipeline if high issues exceed this count')
        string(name: 'SCAN_TIMEOUT_MINUTES', defaultValue: '120', 
            description: 'Timeout in minutes for scan completion')
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
        GIT_REPO_NAME  = "fortify-IWA-2024"
        SCAN_ID        = ""
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.GIT_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_BRANCH = bat(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    
                    env.CRITICAL_THRESHOLD_INT = params.CRITICAL_THRESHOLD.toInteger()
                    env.HIGH_THRESHOLD_INT = params.HIGH_THRESHOLD.toInteger()
                    env.SCAN_TIMEOUT_MINUTES_INT = params.SCAN_TIMEOUT_MINUTES.toInteger()
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
            }
        }

        stage('FoD SAST Scan') {
            steps {
                script {
                    if (params.FOD_SAST == true) {
                        withCredentials([
                            string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                            string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                        ]) {
                            // Paso 1: Ejecutar el scan y guardar output en archivo
                            bat """
                                @echo off
                                echo [INFO] Downloading fcli...
                                curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o fcli-windows.zip
                                tar -xf fcli-windows.zip fcli.exe
                                
                                echo [INFO] Logging into FoD...
                                fcli.exe fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                                
                                echo [INFO] Uploading fat JAR...
                                fcli.exe fod sast-scan start --rel ${params.FOD_RELEASE_ID} --file "target\\\\iwa.jar" --fod-session jenkins > scan_output.txt
                                
                                echo [INFO] Logging out...
                                fcli.exe fod session logout --fod-session jenkins
                            """
                            
                            // Paso 2: Leer el archivo y extraer Scan ID
                            def scanOutput = readFile('scan_output.txt').trim()
                            echo "Scan Output: ${scanOutput}"
                            
                            // M√©todo simple para extraer el Scan ID
                            def scanId = extractScanId(scanOutput)
                            echo "‚úÖ Scan ID capturado(1): ${scanId}"

                            if (scanId) {
                                env.SCAN_ID = scanId.toString().trim()
                                echo "‚úÖ Scan ID capturado(2): ${env.SCAN_ID}"
                            } else {
                                error "‚ùå No se pudo extraer el Scan ID del output"
                            }
                        }
                    }
                }
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                script {
                    if (params.FOD_SAST == true && env.SCAN_ID) {
                        withCredentials([
                            string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                            string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                        ]) {
                            bat """
                                @echo off
                                echo [INFO] Waiting for scan ${env.SCAN_ID} to complete...
                                
                                fcli.exe fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                                
                                set /a TIMEOUT_SECONDS=${env.SCAN_TIMEOUT_MINUTES_INT} * 60
                                fcli.exe fod sast-scan wait-for ${env.SCAN_ID} --fod-session jenkins --timeout %TIMEOUT_SECONDS%
                                if %errorlevel% neq 0 (
                                    echo [ERROR] Scan timed out or failed
                                    exit 1
                                )
                                
                                echo [INFO] Getting scan results...
                                fcli.exe fod sast-scan get ${env.SCAN_ID} --fod-session jenkins --output json > scan_results.json
                                
                                fcli.exe fod session logout --fod-session jenkins
                            """
                        }
                    }
                }
            }
        }

        stage('Validate Scan Results') {
            steps {
                script {
                    if (params.FOD_SAST == true && env.SCAN_ID && fileExists('scan_results.json')) {
                        def results = readJSON file: 'scan_results.json'
                        def critical = results.detailScanResult?.critical ?: 0
                        def high = results.detailScanResult?.high ?: 0
                        def status = results.analysisStatus ?: 'Unknown'
                        
                        echo "üìä SCAN RESULTS for ID: ${env.SCAN_ID}"
                        echo "   Status: ${status}"
                        echo "   Critical Issues: ${critical}"
                        echo "   High Issues: ${high}"
                        echo "   Threshold - Critical: ${env.CRITICAL_THRESHOLD_INT}"
                        echo "   Threshold - High: ${env.HIGH_THRESHOLD_INT}"
                        
                        // Validar contra umbrales
                        if (critical > env.CRITICAL_THRESHOLD_INT) {
                            error "‚ùå BUILD FAILED: Critical issues (${critical}) > threshold (${env.CRITICAL_THRESHOLD_INT})"
                        }
                        
                        if (high > env.HIGH_THRESHOLD_INT) {
                            error "‚ùå BUILD FAILED: High issues (${high}) > threshold (${env.HIGH_THRESHOLD_INT})"
                        }
                        
                        echo "‚úÖ SCAN PASSED: All thresholds met"
                        
                    } else {
                        error "‚ùå No se pudieron obtener resultados del scan"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üìã RESUMEN EJECUCI√ìN"
            echo "   Status: ${currentBuild.currentResult}"
            echo "   Scan ID: ${env.SCAN_ID ?: 'N/A'}"
            echo "   FoD Portal: https://ams.fortify.com"
            
            // Limpieza
            bat """
                @echo off
                if exist fcli-windows.zip del fcli-windows.zip
                if exist fcli.exe del fcli.exe
                if exist scan_output.txt del scan_output.txt
                if exist scan_results.json del scan_results.json
            """
            cleanWs()
        }
        success {
            echo "‚úÖ PIPELINE EXITOSO"
            echo "‚úÖ Scan completado y validado"
            echo "‚úÖ Todos los umbrales de seguridad cumplidos"
        }
        failure {
            echo "‚ùå PIPELINE FALLIDO"
            echo "‚ùå Scan ID: ${env.SCAN_ID ?: 'N/A'}"
            echo "‚ùå Revisar detalles en: https://ams.fortify.com"
        }
    }
}

// Funci√≥n para extraer Scan ID sin usar Matcher (evita problemas de serializaci√≥n)
def extractScanId(String output) {
    echo "Buscando Scan ID en el output..."
    
    // Dividir el output en l√≠neas
    def lines = output.split('\\r?\\n')
    
    // Buscar la l√≠nea que contiene el patr√≥n del scan
    for (line in lines) {
        // Buscar l√≠neas que tengan el formato de tabla de scan
        if (line.contains('Static') && line.contains('Pending') && line.contains('STARTED')) {
            echo "L√≠nea encontrada: ${line}"
            
            // Dividir por espacios y buscar n√∫meros de 8+ d√≠gitos
            def parts = line.trim().split('\\s+')
            for (part in parts) {
                if (part.isNumber() && part.length() >= 8) {
                    echo "‚úÖ Scan ID encontrado: ${part}"
                    return part
                }
            }
        }
    }
    
    // Si no se encuentra en el formato esperado, buscar cualquier n√∫mero de 8+ d√≠gitos
    for (line in lines) {
        def words = line.trim().split('\\s+')
        for (word in words) {
            if (word.isNumber() && word.length() >= 8) {
                echo "‚úÖ Scan ID potencial encontrado: ${word}"
                return word
            }
        }
    }
    
    echo "‚ùå No se encontr√≥ Scan ID en el output"
    return null
}
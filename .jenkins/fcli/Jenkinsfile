pipeline {
    agent any
    environment {
        FOD_SESSION = 'jenkins'  // Nombre de la sesi√≥n FoD configurada en tu fcli
    }
    stages {

        stage('Build') {
            steps {
                echo "üî® Building the application..."
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('FoD SAST Scan') {
            steps {
                echo "üõ°Ô∏è Starting FoD SAST scan..."
                
                // Inicia el scan y guarda el JSON crudo
                bat """
                fcli.exe fod sast-scan start ^
                    --rel 1388854 ^
                    --file "target\\iwa.jar" ^
                    --fod-session %FOD_SESSION% ^
                    --store curScan ^
                    --output json 1>curScan_raw.txt 2>curScan.err
                """

                // Extrae √∫nicamente el JSON del output
                powershell """
                (Get-Content curScan_raw.txt) -join '' | Select-String -Pattern '{.*}' | ForEach-Object { \$_ } | Set-Content curScan.json
                """

                // Lee el JSON en Groovy
                script {
                    def curScan = readJSON file: 'curScan.json'
                    echo "Scan started. Scan ID: ${curScan.scanId}"
                }
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                echo "‚è≥ Waiting for scan completion..."

                script {
                    // Espera a que el scan termine usando la variable de store
                    bat """
                    fcli.exe fod sast-scan wait-for ::curScan:: ^
                        --fod-session %FOD_SESSION%
                    """
                }
            }
        }

        stage('Get Scan Results') {
            steps {
                echo "üìä Retrieving scan results..."

                script {
                    // Guardar resultados en un archivo JSON
                    bat """
                    fcli.exe fod sast-scan get-results ^
                        ::curScan:: ^
                        --fod-session %FOD_SESSION% ^
                        --output json ^
                        --to-file scan_results.json
                    """

                    def results = readJSON file: 'scan_results.json'
                    echo "Scan results retrieved. Analysis status: ${results.analysisStatusType}"
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
        }
        success {
            echo "‚úÖ Pipeline finished successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed!"
        }
    }
}

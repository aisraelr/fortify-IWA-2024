#!/usr/bin/env groovy

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true,
            description: 'Run Fortify on Demand SAST scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com', 
            description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1388854', 
            description: 'FoD Release ID')
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
        GIT_REPO_NAME  = "fortify-IWA-2024"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.GIT_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_BRANCH = bat(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "Repository: ${env.GIT_REPO_NAME}"
                    echo "Commit: ${env.GIT_COMMIT}"
                    echo "Branch: ${env.GIT_BRANCH}"
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                bat "dir target\\*.jar /b"  // Listar archivos JAR generados
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
                stash includes: "target/*.jar", name: "${env.APP_NAME}_release"
            }
        }

        stage('Debug Credentials') {
            steps {
                script {
                    echo "=== DEBUG: CREDENTIALS INFORMATION ==="
                    echo "FOD_URL: ${params.FOD_URL}"
                    echo "FOD_RELEASE_ID: ${params.FOD_RELEASE_ID}"
                    
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'DEBUG_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'DEBUG_CLIENT_SECRET')
                    ]) {
                        echo "FOD_CLIENT_ID length: ${DEBUG_CLIENT_ID.length()} characters"
                        echo "FOD_CLIENT_SECRET length: ${DEBUG_CLIENT_SECRET.length()} characters"
                        echo "FOD_CLIENT_ID starts with: ${DEBUG_CLIENT_ID.substring(0, 4)}..."
                        echo "FOD_CLIENT_SECRET starts with: ${DEBUG_CLIENT_SECRET.substring(0, 4)}..."
                    }
                }
            }
        }

        stage('FoD SAST with fcli (windows)') {
            when {
                expression { params.FOD_SAST == true }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            echo [INFO] ===== FO DSAST SCAN CONFIGURATION =====
                            echo FOD_URL: ${params.FOD_URL}
                            echo FOD_RELEASE_ID: ${params.FOD_RELEASE_ID}
                            echo ==============================================
                            
                            echo [INFO] Downloading fcli for Windows v3.8.1...
                            curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o fcli-windows.zip
                            if %errorlevel% neq 0 (
                                echo [ERROR] Failed to download fcli
                                exit 1
                            )
                            
                            echo [INFO] Extracting fcli...
                            tar -xf fcli-windows.zip fcli.exe
                            if %errorlevel% neq 0 (
                                echo [ERROR] Failed to extract fcli
                                exit 1
                            )
                            
                            echo [INFO] fcli version:
                            fcli.exe --version
                            
                            echo [INFO] Attempting FoD login...
                            fcli.exe fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                            if %errorlevel% neq 0 (
                                echo [ERROR] Failed to login to FoD - HTTP 401 Unauthorized
                                echo [TROUBLESHOOTING] Please verify credentials in FoD portal
                                exit 1
                            )
                            
                            echo [INFO] Login successful! Current sessions:
                            fcli.exe session list
                            
                            echo [INFO] Verifying access to releases...
                            fcli.exe fod release list --fod-session jenkins --output table --max-records 5
                            if %errorlevel% neq 0 (
                                echo [ERROR] Cannot list releases - check API user permissions
                                fcli.exe fod session logout --fod-session jenkins
                                exit 1
                            )
                            
                            echo [INFO] Checking access to release ${params.FOD_RELEASE_ID}...
                            fcli.exe fod release get ${params.FOD_RELEASE_ID} --fod-session jenkins --output json
                            if %errorlevel% neq 0 (
                                echo [ERROR] Cannot access release ${params.FOD_RELEASE_ID}
                                echo [TROUBLESHOOTING] Check:
                                echo [TROUBLESHOOTING] 1. Release ID is correct
                                echo [TROUBLESHOOTING] 2. API user has access to this release
                                fcli.exe fod session logout --fod-session jenkins
                                exit 1
                            )
                            
                            echo [INFO] Looking for build artifacts...
                            dir target\\*.jar /b
                            if not exist target\\*.jar (
                                echo [ERROR] No JAR files found in target directory!
                                echo [DEBUG] Contents of target directory:
                                dir target
                                fcli.exe fod session logout --fod-session jenkins
                                exit 1
                            )
                            
                            echo [INFO] Starting SAST scan for each JAR file...
                            for /f "delims=" %%i in ('dir /b target\\*.jar 2^>nul') do (
                                echo [INFO] ------------------------------------
                                echo [INFO] Processing file: target\\%%i
                                echo [INFO] File info:
                                for /f "tokens=1,2,3,4" %%a in ('dir "target\\%%i" ^| find "%%i"') do (
                                    echo [INFO] Size: %%a Bytes, Date: %%b %%c, Time: %%d
                                )
                                
                                echo [INFO] Starting SAST scan...
                                fcli.exe fod sast-scan start --rel ${params.FOD_RELEASE_ID} --file "target\\%%i" --fod-session jenkins --store curScan
                                if !errorlevel! neq 0 (
                                    echo [ERROR] Failed to start SAST scan for: target\\%%i
                                    echo [DEBUG] Trying with debug mode for more details...
                                    fcli.exe fod sast-scan start --rel ${params.FOD_RELEASE_ID} --file "target\\%%i" --fod-session jenkins --debug
                                    fcli.exe fod session logout --fod-session jenkins
                                    exit 1
                                )
                                echo [INFO] Scan started successfully for: target\\%%i
                            )
                            
                            echo [INFO] Waiting for scan to complete...
                            fcli.exe fod sast-scan wait-for ::curScan:: --fod-session jenkins --timeout 3600
                            if %errorlevel% neq 0 (
                                echo [ERROR] Scan failed or timed out after 60 minutes
                                fcli.exe fod session logout --fod-session jenkins
                                exit 1
                            )
                            
                            echo [INFO] Retrieving scan results...
                            fcli.exe fod sast-scan get ::curScan:: --fod-session jenkins --output json
                            if %errorlevel% neq 0 (
                                echo [WARNING] Could not retrieve scan results, but scan completed
                            )
                            
                            echo [INFO] Logging out from FoD...
                            fcli.exe fod session logout --fod-session jenkins
                            echo [SUCCESS] ########################################
                            echo [SUCCESS] # FoD SAST scan completed successfully #
                            echo [SUCCESS] ########################################
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed - Status: ${currentBuild.currentResult}"
            cleanWs()
        }
        success {
            echo "✅ Pipeline succeeded!"
            slackSend channel: '#builds', message: "✅ Pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} succeeded"
        }
        failure {
            echo "❌ Pipeline failed!"
            slackSend channel: '#builds', message: "❌ Pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} failed"
        }
        unstable {
            echo "⚠️  Pipeline unstable!"
        }
    }
}
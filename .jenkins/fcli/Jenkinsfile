pipeline {
    agent any

    environment {
        FOD_SESSION = 'jenkins'        // Nombre de la sesi√≥n FoD configurada
        RELEASE_ID  = '1388854'        // ID de tu release en FoD
        APP_FILE    = 'target\\iwa.jar' // Ruta del archivo a escanear
    }

    stages {

        stage('FoD SAST Scan') {
            steps {
                echo "üöÄ Starting FoD SAST scan..."

                // Ejecutar el scan y guardar salida cruda
                bat """
                fcli.exe fod sast-scan start --rel ${RELEASE_ID} --file "${APP_FILE}" --fod-session ${FOD_SESSION} --store curScan --output json 1>curScan_raw.txt 2>curScan.err
                """

                // Extraer solo el JSON v√°lido usando PowerShell
                powershell """
                \$jsonLine = Select-String -Path curScan_raw.txt -Pattern '^{.*}\$' | ForEach-Object { \$_.
                Matches[0].Value }
                \$jsonLine | Set-Content -Encoding UTF8 curScan.json
                """

                // Leer JSON limpio y guardar releaseAndScanId en variable de entorno
                script {
                    def scanInfo = readJSON file: 'curScan.json'
                    env.SCAN_ID = scanInfo.releaseAndScanId
                    echo "Scan ID obtained: ${env.SCAN_ID}"
                }
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                echo "‚è≥ Waiting for scan completion..."

                // Esperar a que el scan termine
                bat """
                fcli.exe fod sast-scan wait-for ::SCAN_ID:: --fod-session ${FOD_SESSION} --timeout 1h
                """
            }
        }

        stage('Get Scan Results') {
            steps {
                echo "üìä Getting scan results..."

                // Obtener resultados finales del scan
                bat """
                fcli.exe fod sast-scan get-results ::SCAN_ID:: --fod-session ${FOD_SESSION} --output json --store scanResults --to-file scanResults.json
                """
                // Leer y mostrar el resultado
                script {
                    def results = readJSON file: 'scanResults.json'
                    echo "Analysis Status: ${results.analysisStatusType}"
                    echo "Total Issues: ${results.totalIssues ?: 'N/A'}"
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
            bat "del curScan_raw.txt curScan.json curScan.err scanResults.json"
        }
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed!"
        }
    }
}

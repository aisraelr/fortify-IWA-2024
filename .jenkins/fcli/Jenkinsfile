pipeline {
    agent any

    environment {
        FOD_SESSION = "jenkins"      // Nombre de tu sesi√≥n FoD configurada
        RELEASE_ID  = "1388854"      // Release ID
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('FoD SAST Scan') {
            steps {
                echo "üöÄ Starting FoD SAST scan..."
                bat """
                    fcli.exe fod sast-scan start ^
                        --rel ${RELEASE_ID} ^
                        --file "target\\iwa.jar" ^
                        --fod-session ${FOD_SESSION} ^
                        --store curScan ^
                        --output json ^
                        1>curScan_raw.txt 2>curScan.err
                """

                powershell """
                    # Extraer solo la l√≠nea JSON del log
                    \$jsonLine = Select-String -Path curScan_raw.txt -Pattern '^{.*}\$' | ForEach-Object { \$_.
Matches[0].Value }
                    \$jsonLine | Set-Content -Encoding UTF8 curScan.json
                """

                script {
                    // Leer JSON y guardar Scan ID
                    def scanInfo = readJSON file: 'curScan.json'
                    env.SCAN_ID = scanInfo.releaseAndScanId
                    echo "‚úÖ Scan started: ${env.SCAN_ID}"
                }
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                echo "‚è≥ Waiting for scan completion..."
                bat "fcli.exe fod sast-scan wait-for ::SCAN_ID:: --fod-session ${FOD_SESSION} --timeout 1h"
            }
        }

        stage('Get Scan Results') {
            steps {
                echo "üìÑ Retrieving scan results..."
                bat "fcli.exe fod sast-scan results ::SCAN_ID:: --fod-session ${FOD_SESSION} --output json --store scanResults"
                
                powershell """
                    # Guardar resultados en archivo JSON
                    \$scanResults = ConvertTo-Json (::scanResults::)
                    Set-Content -Path scanResults.json -Value \$scanResults -Encoding UTF8
                """

                script {
                    def results = readJSON file: 'scanResults.json'
                    echo "Scan Analysis Status: ${results.analysisStatusType}"
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
            bat "del curScan_raw.txt curScan.json curScan.err scanResults.json"
        }
        failure {
            echo "‚ùå Pipeline failed!"
        }
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
    }
}

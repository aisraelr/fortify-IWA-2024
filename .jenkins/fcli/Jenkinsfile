#!/usr/bin/env groovy

// Variables globales para persistir los Scan IDs entre stages y en post
def GLOBAL_SCAN_ID_SAST = ""
def GLOBAL_SCAN_ID_OSS  = ""

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true,
            description: 'Run Fortify on Demand SAST scan using fcli')
        booleanParam(name: 'FOD_OSS', defaultValue: true,
            description: 'Run Fortify on Demand OSS scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com',
            description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1388854',
            description: 'FoD Release ID')
        string(name: 'CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if critical issues exceed this count')
        string(name: 'HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if high issues exceed this count')
        string(name: 'SCAN_TIMEOUT_MINUTES', defaultValue: '120',
            description: 'Timeout in minutes for wait-for attempts')
        string(name: 'WAIT_RETRIES', defaultValue: '2',
            description: 'Number of additional wait-for retry attempts')
        string(name: 'WAIT_RETRY_DELAY_MINUTES', defaultValue: '2',
            description: 'Minutes to wait between retries')
        string(name: 'OSS_CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if OSS critical issues exceed this count')
        string(name: 'OSS_HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if OSS high issues exceed this count')
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
    }

    stages {

        stage('Initialize') {
            steps {
                script {
                    env.GIT_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_BRANCH = bat(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
            }
        }

        stage('Prepare fcli') {
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    bat """
                        @echo off
                        if not exist "${FCLI_HOME}" mkdir "${FCLI_HOME}"
                        if not exist "${FCLI_HOME}\\fcli.exe" (
                            echo [INFO] Descargando fcli...
                            curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o "${FCLI_HOME}\\fcli-windows.zip"
                            tar -xf "${FCLI_HOME}\\fcli-windows.zip" -C "${FCLI_HOME}" fcli.exe
                        ) else (
                            echo [INFO] fcli.exe ya existe en ${FCLI_HOME}
                        )
                    """
                }
            }
        }

        stage('FoD SAST Scan') {
            when { expression { return params.FOD_SAST } }
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                            "${FCLI_HOME}\\fcli.exe" fod sast-scan start --rel "${params.FOD_RELEASE_ID}" --file target\\iwa.jar --fod-session jenkins --output json > sast-output.json 2>&1
                            "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                        """
                        if (!fileExists('sast-output.json') || readFile('sast-output.json').trim() == '') {
                            error "‚ùå No se gener√≥ sast-output.json o est√° vac√≠o"
                        }
                        def output = readFile('sast-output.json')
                        GLOBAL_SCAN_ID_SAST = extractScanId(output)
                        if (!GLOBAL_SCAN_ID_SAST) error "‚ùå No se pudo extraer el Scan ID SAST"
                        echo "‚úÖ Scan ID SAST: ${GLOBAL_SCAN_ID_SAST}"
                    }
                }
            }
        }

        stage('Wait for SAST Scan Completion') {
            when { expression { return params.FOD_SAST && GLOBAL_SCAN_ID_SAST } }
            steps {
                script {
                    waitForScan('SAST', GLOBAL_SCAN_ID_SAST)
                }
            }
        }

        stage('Validate SAST Results') {
            when { expression { return params.FOD_SAST } }
            steps {
                script {
                    validateScanResults('sast-output.json', params.CRITICAL_THRESHOLD.toInteger(), params.HIGH_THRESHOLD.toInteger(), "SAST")
                }
            }
        }

        stage('Prepare OSS Package') {
            when { expression { return params.FOD_OSS } }
            steps {
                script {
                    bat """
                        @echo off
                        if exist oss-scan.zip del oss-scan.zip
                        scancentral.bat package -bt mvn -oss -o oss-scan.zip
                    """
                }
            }
        }

        stage('FoD OSS Scan') {
            when { expression { return params.FOD_OSS } }
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                            "${FCLI_HOME}\\fcli.exe" fod oss-scan start --rel "${params.FOD_RELEASE_ID}" --file oss-scan.zip --fod-session jenkins --output json > oss-output.json 2>&1
                            "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                        """
                        if (!fileExists('oss-output.json') || readFile('oss-output.json').trim() == '') {
                            error "‚ùå No se gener√≥ oss-output.json o est√° vac√≠o"
                        }
                        def output = readFile('oss-output.json')
                        GLOBAL_SCAN_ID_OSS = extractScanId(output)
                        if (!GLOBAL_SCAN_ID_OSS) error "‚ùå No se pudo extraer el Scan ID OSS"
                        echo "‚úÖ Scan ID OSS: ${GLOBAL_SCAN_ID_OSS}"
                    }
                }
            }
        }

        stage('Wait for OSS Scan Completion') {
            when { expression { return params.FOD_OSS && GLOBAL_SCAN_ID_OSS } }
            steps {
                script {
                    waitForScan('OSS', GLOBAL_SCAN_ID_OSS)
                }
            }
        }

        stage('Validate OSS Results') {
            when { expression { return params.FOD_OSS } }
            steps {
                script {
                    validateScanResults('oss-output.json', params.OSS_CRITICAL_THRESHOLD.toInteger(), params.OSS_HIGH_THRESHOLD.toInteger(), "OSS")
                }
            }
        }

    }

    post {
        always {
            script {
                echo "üìã RESUMEN EJECUCI√ìN"
                echo "   Status: ${currentBuild.currentResult}"
                echo "   SAST Scan ID: ${GLOBAL_SCAN_ID_SAST ?: 'N/A'}"
                echo "   OSS Scan ID: ${GLOBAL_SCAN_ID_OSS ?: 'N/A'}"
                cleanWs()
            }
        }
    }
}

// =======================
// Funciones auxiliares
// =======================

def extractScanId(String output) {
    if (!output) return null
    def matcher = (output =~ /"scanId"\s*:\s*(\d+)/)
    if (matcher.find()) return matcher.group(1)
    return null
}

def waitForScan(String type, String scanId) {
    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
    int retries = params.WAIT_RETRIES.toInteger()
    int delayMin = params.WAIT_RETRY_DELAY_MINUTES.toInteger()
    int maxAttempts = 1 + retries
    boolean success = false

    withCredentials([
        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
    ]) {
        for (int attempt=1; attempt<=maxAttempts; attempt++) {
            echo "üîÅ Wait-for ${type} attempt ${attempt}/${maxAttempts}"
            def rc = bat(script: """
                @echo off
                "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                "${FCLI_HOME}\\fcli.exe" fod ${type.toLowerCase()}-scan wait-for ${scanId} --fod-session jenkins --timeout ${params.SCAN_TIMEOUT_MINUTES}m --output json > wait-${type}.json 2>&1
                "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
            """, returnStatus: true)
            if (rc == 0) { success = true; break }
            else if (attempt < maxAttempts) { sleep time: delayMin, unit: 'MINUTES' }
        }
    }
    if (!success) error "‚ùå Wait-for ${type} scan ${scanId} failed after ${maxAttempts} attempts"
}

def validateScanResults(String file, int criticalThreshold, int highThreshold, String type) {
    if (!fileExists(file)) error "‚ùå No se encontr√≥ ${file}"
    def raw = readFile(file).trim()
    if (raw == '') error "‚ùå ${file} est√° vac√≠o"
    def json = readJSON text: raw
    def result = json[0]
    def status = result.analysisStatusType ?: 'Unknown'
    def criticalCount = result.issueCountCritical ?: 0
    def highCount = result.issueCountHigh ?: 0
    echo "üìä ${type} SCAN RESULTS"
    echo "   Status: ${status}"
    echo "   Critical Issues: ${criticalCount} (Threshold: ${criticalThreshold})"
    echo "   High Issues: ${highCount} (Threshold: ${highThreshold})"
    if (criticalCount > criticalThreshold) error "‚ùå ${type} Critical issues exceed threshold"
    if (highCount > highThreshold) error "‚ùå ${type} High issues exceed threshold"
    echo "‚úÖ ${type} scan passed all thresholds"
}

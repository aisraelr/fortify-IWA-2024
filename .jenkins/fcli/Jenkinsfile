stage('FoD SAST Scan') {
    when {
        expression { params.FOD_SAST == true }
    }
    steps {
        script {
            withCredentials([
                string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
            ]) {
                // Ejecutar el comando y capturar TODO el output
                def scanOutput = bat(script: """
                    @echo off
                    echo [INFO] Downloading fcli for Windows v3.8.1...
                    curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o fcli-windows.zip
                    if %errorlevel% neq 0 exit 1
                    
                    echo [INFO] Extracting fcli...
                    tar -xf fcli-windows.zip fcli.exe
                    if %errorlevel% neq 0 exit 1
                    
                    echo [INFO] Logging into FoD...
                    fcli.exe fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                    if %errorlevel% neq 0 exit 1
                    
                    echo [INFO] Uploading fat JAR for complete analysis...
                    fcli.exe fod sast-scan start --rel ${params.FOD_RELEASE_ID} --file "target\\\\iwa.jar" --fod-session jenkins --store curScan
                    
                    echo [INFO] Logging out from FoD...
                    fcli.exe fod session logout --fod-session jenkins
                """, returnStdout: true).trim()
                
                // DEBUG: Mostrar el output completo para diagn√≥stico
                echo "=== DEBUG: OUTPUT COMPLETO ==="
                echo scanOutput
                echo "=============================="
                
                // M√∫ltiples m√©todos para extraer el Scan ID
                def scanId = null
                
                // M√©todo 1: Buscar el patr√≥n en la tabla
                def scanIdMatch = scanOutput =~ /(?m)(\\d+)\\s+Static\\s+Pending/
                if (scanIdMatch) {
                    scanId = scanIdMatch[0][1]
                    echo "‚úÖ Scan ID encontrado (M√©todo 1): ${scanId}"
                }
                
                // M√©todo 2: Buscar por l√≠nea que contiene "Id"
                if (!scanId) {
                    scanOutput.eachLine { line ->
                        if (line.contains('Id') && line.contains('Static') && line.contains('Pending')) {
                            def parts = line.trim().split('\\\\s+')
                            if (parts.size() >= 2 && parts[1].isNumber()) {
                                scanId = parts[1]
                                echo "‚úÖ Scan ID encontrado (M√©todo 2): ${scanId}"
                            }
                        }
                    }
                }
                
                // M√©todo 3: Buscar cualquier n√∫mero de 8+ d√≠gitos
                if (!scanId) {
                    def digitMatch = scanOutput =~ /\\b(\\d{8,})\\b/
                    if (digitMatch) {
                        scanId = digitMatch[0][1]
                        echo "‚úÖ Scan ID encontrado (M√©todo 3): ${scanId}"
                    }
                }
                
                if (scanId) {
                    env.SCAN_ID = scanId
                    echo "üéØ Scan ID capturado: ${env.SCAN_ID}"
                } else {
                    echo "‚ö†Ô∏è  No se pudo extraer el Scan ID autom√°ticamente"
                    echo "üìã Output del scan para revisi√≥n manual:"
                    echo scanOutput
                    
                    // Forzar un Scan ID para continuar (opcional)
                    env.SCAN_ID = "MANUAL_REVIEW_NEEDED"
                    echo "‚ÑπÔ∏è  Usando Scan ID temporal: ${env.SCAN_ID}"
                }
                
                echo "‚úÖ Scan submitted successfully!"
                echo "üìã Scan ID: ${env.SCAN_ID}"
                echo "üåê FoD Portal: ${params.FOD_URL}"
            }
        }
    }
}
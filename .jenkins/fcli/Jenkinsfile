#!/usr/bin/env groovy

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true,
            description: 'Run Fortify on Demand SAST scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com', 
            description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1503133', 
            description: 'FoD Release ID')
        int(name: 'CRITICAL_THRESHOLD', defaultValue: 0, 
            description: 'Fail pipeline if critical issues exceed this count')
        int(name: 'HIGH_THRESHOLD', defaultValue: 10, 
            description: 'Fail pipeline if high issues exceed this count')
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
        GIT_REPO_NAME  = "fortify-IWA-2024"
        SCAN_IDS       = ""  // Para almacenar IDs dinámicamente
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.GIT_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_BRANCH = bat(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "Repository: ${env.GIT_REPO_NAME}"
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                bat "dir target\\*.jar /b"
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
                stash includes: "target/*.jar", name: "${env.APP_NAME}_release"
            }
        }

        stage('FoD SAST Scan - Queue Only') {
            when {
                expression { params.FOD_SAST == true }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            echo [INFO] ===== FO DSAST SCAN =====
                            set SCAN_IDS=
                            
                            for /f "delims=" %%i in ('dir /b target\\*.jar 2^>nul') do (
                                echo [INFO] Uploading: target\\%%i
                                fcli.exe fod sast-scan start --rel ${params.FOD_RELEASE_ID} --file "target\\%%i" --fod-session jenkins --store curScan
                                if !errorlevel! neq 0 (
                                    echo [WARNING] fcli returned error code, but continuing...
                                )
                            )
                            
                            echo [INFO] Listing recent scans...
                            fcli.exe fod sast-scan list --rel ${params.FOD_RELEASE_ID} --fod-session jenkins --output json > scans.json
                        """
                        
                        // Leer el JSON y extraer los IDs
                        script {
                            def scans = readJSON file: 'scans.json'
                            def scanIds = []
                            scans.each { scan ->
                                if (scan.analysisStatus == 'Queued' || scan.analysisStatus == 'Pending') {
                                    scanIds.add(scan.id)
                                }
                            }
                            env.SCAN_IDS = scanIds.join(', ')
                            echo "Captured Scan IDs: ${env.SCAN_IDS}"
                        }
                    }
                }
            }
        }

        stage('Check Scan Results') {
            when {
                expression { params.FOD_SAST == true }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        // Esperar a que los scans se completen (opcional, con timeout)
                        bat """
                            @echo off
                            echo [INFO] Waiting for scans to complete (timeout: 120 minutes)...
                            fcli.exe fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                            
                            for %%i in (${env.SCAN_IDS}) do (
                                echo [INFO] Waiting for scan %%i...
                                fcli.exe fod sast-scan wait-for %%i --fod-session jenkins --timeout 7200 || (
                                    echo [WARNING] Scan %%i timed out or failed, but continuing...
                                )
                            )
                        """
                        
                        // Verificar resultados y umbrales
                        bat """
                            @echo off
                            echo [INFO] Checking scan results against thresholds...
                            echo Critical Threshold: ${params.CRITICAL_THRESHOLD}
                            echo High Threshold: ${params.HIGH_THRESHOLD}
                            
                            for %%i in (${env.SCAN_IDS}) do (
                                echo [INFO] Getting results for scan %%i...
                                fcli.exe fod sast-scan get %%i --fod-session jenkins --output json > scan_%%i_results.json
                            )
                            
                            fcli.exe fod session logout --fod-session jenkins
                        """
                        
                        // Analizar resultados
                        script {
                            def criticalTotal = 0
                            def highTotal = 0
                            def failedScans = []
                            
                            env.SCAN_IDS.split(', ').each { scanId ->
                                def resultsFile = "scan_${scanId}_results.json"
                                if (fileExists(resultsFile)) {
                                    def results = readJSON file: resultsFile
                                    def critical = results.detailScanResult?.critical ?? 0
                                    def high = results.detailScanResult?.high ?? 0
                                    def status = results.analysisStatus ?: 'Unknown'
                                    
                                    echo "Scan ${scanId}: Critical=${critical}, High=${high}, Status=${status}"
                                    
                                    criticalTotal += critical
                                    highTotal += high
                                    
                                    if (critical > params.CRITICAL_THRESHOLD || high > params.HIGH_THRESHOLD) {
                                        failedScans.add(scanId)
                                    }
                                }
                            }
                            
                            echo "TOTALS - Critical: ${criticalTotal}, High: ${highTotal}"
                            echo "Thresholds - Critical: ${params.CRITICAL_THRESHOLD}, High: ${params.HIGH_THRESHOLD}"
                            
                            if (criticalTotal > params.CRITICAL_THRESHOLD) {
                                error "❌ FAILED: Critical issues (${criticalTotal}) exceed threshold (${params.CRITICAL_THRESHOLD})"
                            }
                            
                            if (highTotal > params.HIGH_THRESHOLD) {
                                error "❌ FAILED: High issues (${highTotal}) exceed threshold (${params.HIGH_THRESHOLD})"
                            }
                            
                            if (failedScans) {
                                echo "⚠️  The following scans exceeded thresholds: ${failedScans}"
                            } else {
                                echo "✅ ALL SCANS PASSED THRESHOLD CHECKS"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed - Status: ${currentBuild.currentResult}"
            echo "Scan IDs: ${env.SCAN_IDS}"
            echo "FoD Portal: https://ams.fortify.com"
            cleanWs()
        }
        success {
            echo "✅ Pipeline succeeded!"
        }
        failure {
            echo "❌ Pipeline failed!"
        }
    }
}
pipeline {
    agent any

    environment {
        FOD_SESSION = 'jenkins'
        RELEASE_ID  = '1388854'
        APP_FILE    = 'target\\iwa.jar'
    }

    stages {

        stage('FoD SAST Scan') {
            steps {
                echo "üöÄ Starting FoD SAST scan..."
                
                // Ejecutar el SAST scan
                bat """
                fcli.exe fod sast-scan start ^
                    --rel ${RELEASE_ID} ^
                    --file "${APP_FILE}" ^
                    --fod-session ${FOD_SESSION} ^
                    --store curScan ^
                    --output json 1>curScan_raw.txt 2>curScan.err
                """

                // Extraer JSON v√°lido usando PowerShell
                powershell '''
                $jsonLine = Select-String -Path curScan_raw.txt -Pattern '{.*}' | ForEach-Object { $_ -replace '^.*?({.*}).*$', '$1' }
                $jsonLine | Set-Content -Encoding UTF8 curScan.json
                '''

                // Leer JSON para Groovy
                script {
                    def scanInfo = readJSON file: 'curScan.json'
                    echo "Scan started: ID=${scanInfo.scanId}, Status=${scanInfo.analysisStatusType}"
                    // Guardamos el releaseAndScanId para esperar el scan
                    env.SCAN_ID = scanInfo.releaseAndScanId
                }
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                echo "‚è≥ Waiting for scan completion..."
                bat """
                fcli.exe fod sast-scan wait-for ::SCAN_ID:: ^
                    --fod-session ${FOD_SESSION} ^
                    --interval 30s ^
                    --timeout 60m
                """
            }
        }

        stage('Get Scan Results') {
            steps {
                echo "üìä Retrieving scan results..."
                bat """
                fcli.exe fod sast-scan results ::SCAN_ID:: ^
                    --fod-session ${FOD_SESSION} ^
                    --output json ^
                    --to-file scan_results.json
                """
                script {
                    def results = readJSON file: 'scan_results.json'
                    echo "Scan completed. Analysis status: ${results.analysisStatusType}"
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
        }
        success {
            echo "‚úÖ Pipeline finished successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed!"
        }
    }
}

#!/usr/bin/env groovy

pipeline {
    agent any

    environment {
        FOD_URL = "https://api.ams.fortify.com"
        GLOBAL_SCAN_ID = ""
    }

    stages {
        stage('Upload to FoD') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'fod-credentials', usernameVariable: 'FOD_CLIENT_ID', passwordVariable: 'FOD_CLIENT_SECRET')]) {
                        bat """
                        echo Uploading artifact to FoD...
                        fcli fod sast-scan start --release "IWA-JAVA-2024:release" --file iwa.jar --session jenkins > scan_output.txt
                        """

                        def output = readFile('scan_output.txt')
                        echo "Buscando Scan ID en el output..."
                        def matcher = output =~ /\\b(\\d{7,})\\b\\s+Static\\s+Pending/
                        if (matcher.find()) {
                            GLOBAL_SCAN_ID = matcher.group(1)
                            echo "‚úÖ Scan ID encontrado: ${GLOBAL_SCAN_ID}"
                        } else {
                            error "‚ùå No se encontr√≥ el Scan ID en el output."
                        }
                    }
                }
            }
        }

        stage('Debug Scan ID') {
            steps {
                script {
                    echo "üõ†Ô∏è Debug Scan ID = ${GLOBAL_SCAN_ID}"
                }
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'fod-credentials', usernameVariable: 'FOD_CLIENT_ID', passwordVariable: 'FOD_CLIENT_SECRET')]) {
                        bat """
                        echo Waiting for scan %GLOBAL_SCAN_ID% to complete...
                        fcli fod scan wait-for %GLOBAL_SCAN_ID% --timeout 30m --session jenkins --store last-scan.json
                        """
                    }
                }
            }
        }

        stage('Validate Scan Results') {
            steps {
                script {
                    if (fileExists('last-scan.json')) {
                        def scanResults = readJSON file: 'last-scan.json'

                        echo "üìù RAW SCAN RESULTS JSON:"
                        echo groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(scanResults))

                        def status = scanResults?.status ?: "Unknown"
                        def criticalCount = (scanResults?.issues?.critical ?: "0").toInteger()
                        def highCount     = (scanResults?.issues?.high ?: "0").toInteger()

                        echo "üìä SCAN RESULTS for ID: ${GLOBAL_SCAN_ID}"
                        echo "   Status: ${status}"
                        echo "   Critical Issues: ${criticalCount}"
                        echo "   High Issues: ${highCount}"

                        // Thresholds
                        def thresholdCritical = 0
                        def thresholdHigh = 10

                        echo "   Threshold - Critical: ${thresholdCritical}"
                        echo "   Threshold - High: ${thresholdHigh}"

                        if (criticalCount > thresholdCritical || highCount > thresholdHigh) {
                            error "‚ùå Scan failed: too many issues"
                        }
                    } else {
                        error "‚ùå Scan results file not found"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üìã RESUMEN EJECUCI√ìN"
            echo "   Status: ${currentBuild.currentResult}"
            echo "   Scan ID: ${GLOBAL_SCAN_ID}"
            echo "   FoD Portal: ${FOD_URL}"
            bat "echo Cleaning workspace..."
            cleanWs()
        }
        failure {
            echo "‚ùå PIPELINE FALLIDO"
            echo "‚ùå Scan ID: ${GLOBAL_SCAN_ID}"
            echo "‚ùå Revisar detalles en: ${FOD_URL}"
        }
    }
}

#!/usr/bin/env groovy

// Variables globales para persistir los Scan IDs
def GLOBAL_SAST_SCAN_ID = ""
def GLOBAL_OSS_SCAN_ID  = ""

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true,
            description: 'Run Fortify on Demand SAST scan using fcli')
        booleanParam(name: 'FOD_OSS', defaultValue: true,
            description: 'Run Fortify on Demand OSS scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com',
            description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1388854',
            description: 'FoD Release ID')
        string(name: 'SCAN_TIMEOUT_MINUTES', defaultValue: '120',
            description: 'Timeout in minutes for wait-for attempts')
        string(name: 'WAIT_RETRIES', defaultValue: '2',
            description: 'Number of additional wait-for retry attempts')
        string(name: 'WAIT_RETRY_DELAY_MINUTES', defaultValue: '2',
            description: 'Minutes to wait between retries')

        string(name: 'CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if critical issues exceed this count')
        string(name: 'HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if high issues exceed this count')
        string(name: 'OSS_CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if OSS critical issues exceed this count')
        string(name: 'OSS_HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if OSS high issues exceed this count')
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
        GIT_REPO_NAME  = "fortify-IWA-2024"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.CRITICAL_THRESHOLD_INT = params.CRITICAL_THRESHOLD.toInteger()
                    env.HIGH_THRESHOLD_INT = params.HIGH_THRESHOLD.toInteger()
                    env.SCAN_TIMEOUT_MINUTES_INT = params.SCAN_TIMEOUT_MINUTES.toInteger()
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
            }
        }

        stage('Prepare fcli') {
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    bat """
                        @echo off
                        if not exist "${FCLI_HOME}" mkdir "${FCLI_HOME}"
                        if not exist "${FCLI_HOME}\\fcli.exe" (
                            echo [INFO] Descargando fcli...
                            curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o "${FCLI_HOME}\\fcli-windows.zip"
                            tar -xf "${FCLI_HOME}\\fcli-windows.zip" -C "${FCLI_HOME}" fcli.exe
                        ) else (
                            echo [INFO] fcli.exe ya existe
                        )
                    """
                }
            }
        }

        stage('FoD SAST Scan') {
            when { expression { params.FOD_SAST } }
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                            "${FCLI_HOME}\\fcli.exe" fod sast-scan start --rel "${params.FOD_RELEASE_ID}" --file target\\iwa.jar --fod-session jenkins > sast-output.txt
                            "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                        """
                        def scanOutput = readFile('sast-output.txt')
                        GLOBAL_SAST_SCAN_ID = extractScanId(scanOutput)
                        if (!GLOBAL_SAST_SCAN_ID) { error "No se pudo extraer el Scan ID SAST" }
                        echo "‚úÖ Scan ID SAST: ${GLOBAL_SAST_SCAN_ID}"
                    }
                }
            }
        }

        stage('Wait for SAST Scan Completion') {
            when { expression { params.FOD_SAST } }
            steps {
                script {
                    waitForFoDScan(GLOBAL_SAST_SCAN_ID, "sast", params.SCAN_TIMEOUT_MINUTES.toInteger())
                }
            }
        }

        stage('Validate SAST Results') {
            when { expression { params.FOD_SAST } }
            steps {
                script {
                    validateFoDResults("last-scan.json", params.CRITICAL_THRESHOLD.toInteger(), params.HIGH_THRESHOLD.toInteger())
                }
            }
        }

        stage('Prepare OSS Package') {
            when { expression { params.FOD_OSS } }
            steps {
                script {
                    bat """
                        @echo off
                        if exist oss-scan.zip del oss-scan.zip
                        scancentral.bat package -bt mvn -oss -o oss-scan.zip
                    """
                }
            }
        }

        stage('FoD OSS Scan') {
            when { expression { params.FOD_OSS } }
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                            "${FCLI_HOME}\\fcli.exe" fod oss-scan start --rel "${params.FOD_RELEASE_ID}" --file "oss-scan.zip" --fod-session jenkins --output json > oss-start-output.json
                            "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                        """
                        def ossOutput = readFile('oss-start-output.json')
                        def match = (ossOutput =~ /"scanId"\s*:\s*(\d+)/)
                        if (match) { GLOBAL_OSS_SCAN_ID = match[0][1] } else { error "No se pudo extraer Scan ID OSS" }
                        echo "‚úÖ Scan ID OSS: ${GLOBAL_OSS_SCAN_ID}"
                    }
                }
            }
        }

        stage('Wait for OSS Scan Completion') {
            when { expression { params.FOD_OSS } }
            steps {
                script {
                    waitForFoDScan(GLOBAL_OSS_SCAN_ID, "oss", params.SCAN_TIMEOUT_MINUTES.toInteger())
                }
            }
        }

        stage('Validate OSS Results') {
            when { expression { params.FOD_OSS } }
            steps {
                script {
                    validateFoDResults("oss-scan-output.json", params.OSS_CRITICAL_THRESHOLD.toInteger(), params.OSS_HIGH_THRESHOLD.toInteger())
                }
            }
        }
    }

    post {
        always {
            echo "üìã RESUMEN EJECUCI√ìN"
            echo "   Status: ${currentBuild.currentResult}"
            echo "   SAST Scan ID: ${GLOBAL_SAST_SCAN_ID ?: 'N/A'}"
            echo "   OSS Scan ID: ${GLOBAL_OSS_SCAN_ID ?: 'N/A'}"
        }
        success { echo "‚úÖ PIPELINE EXITOSO" }
        failure { echo "‚ùå PIPELINE FALLIDO" }
    }
}

// ==================== FUNCIONES ====================

def extractScanId(String output) {
    if (!output) return null
    def fallback = (output =~ /\b(\d{7,})\b/)
    return fallback.find() ? fallback.group(1) : null
}

def waitForFoDScan(String scanId, String type, int timeoutMinutes) {
    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
    int retries = params.WAIT_RETRIES.toInteger()
    int delayMin = params.WAIT_RETRY_DELAY_MINUTES.toInteger()
    int maxAttempts = 1 + retries
    boolean success = false

    withCredentials([
        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
    ]) {
        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            echo "üîÅ Wait-for ${type} attempt ${attempt}/${maxAttempts}"
            def rc = bat(script: """
                @echo off
                "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                "${FCLI_HOME}\\fcli.exe" fod ${type}-scan wait-for ${scanId} --fod-session jenkins --timeout ${timeoutMinutes}m --output json > ${type}-scan-output.json
                "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
            """, returnStatus: true)

            if (rc == 0) { success = true; break }
            if (attempt < maxAttempts) { sleep time: delayMin, unit: 'MINUTES' }
        }
    }
    if (!success) { error "‚ùå ${type.toUpperCase()} scan ${scanId} no finaliz√≥ a tiempo" }
}

def validateFoDResults(String fileName, int criticalThreshold, int highThreshold) {
    if (!fileExists(fileName)) { error "‚ùå No se encontr√≥ ${fileName}" }
    def rawText = readFile(fileName)
    def jsonStart = rawText.indexOf('[')
    if (jsonStart < 0) { error "‚ùå No se encontr√≥ bloque JSON en ${fileName}" }
    def scanResults = readJSON text: rawText.substring(jsonStart).trim()
    def result = scanResults[0]
    def status = result.analysisStatusType ?: 'Unknown'
    def criticalCount = result.issueCountCritical ?: 0
    def highCount = result.issueCountHigh ?: 0
    echo "üìä Scan Status: ${status}, Critical: ${criticalCount}, High: ${highCount}"
    if (criticalCount > criticalThreshold) { error "‚ùå Critical issues (${criticalCount}) > threshold (${criticalThreshold})" }
    if (highCount > highThreshold) { error "‚ùå High issues (${highCount}) > threshold (${highThreshold})" }
    echo "‚úÖ Todos los umbrales cumplidos"
}

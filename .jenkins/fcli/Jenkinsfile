#!/usr/bin/env groovy

// Variable global para persistir el Scan ID entre stages
def GLOBAL_SCAN_ID = ""

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true,
            description: 'Run Fortify on Demand SAST scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com',
            description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1503133',
            description: 'FoD Release ID')
        string(name: 'CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if critical issues exceed this count')
        string(name: 'HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if high issues exceed this count')
        string(name: 'SCAN_TIMEOUT_MINUTES', defaultValue: '120',
            description: 'Timeout in minutes for scan completion')
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
        GIT_REPO_NAME  = "fortify-IWA-2024"
        FCLI_HOME      = "${env.WORKSPACE}\\fcli"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.GIT_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_BRANCH = bat(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()

                    env.CRITICAL_THRESHOLD_INT = params.CRITICAL_THRESHOLD.toInteger()
                    env.HIGH_THRESHOLD_INT = params.HIGH_THRESHOLD.toInteger()
                    env.SCAN_TIMEOUT_MINUTES_INT = params.SCAN_TIMEOUT_MINUTES.toInteger()
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
            }
        }

        stage('FoD SAST Scan') {
            steps {
                script {
                    if (params.FOD_SAST) {
                        // Asegurar fcli
                        bat """
                            @echo off
                            if not exist "${FCLI_HOME}" mkdir "${FCLI_HOME}"
                            if not exist "${FCLI_HOME}\\fcli.exe" (
                                echo [INFO] Descargando fcli...
                                curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o "${FCLI_HOME}\\fcli-windows.zip"
                                tar -xf "${FCLI_HOME}\\fcli-windows.zip" -C "${FCLI_HOME}" fcli.exe
                            )
                        """

                        withCredentials([
                            string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                            string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                        ]) {
                            bat """
                                @echo off
                                "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins
                                "${FCLI_HOME}\\fcli.exe" fod sast-scan start --rel ${params.FOD_RELEASE_ID} --file target\\iwa.jar --fod-session jenkins > scan_output.txt
                                "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                            """

                            def scanOutput = readFile('scan_output.txt')
                            echo "Scan Output:\n${scanOutput}"

                            // Extraer Scan ID
                            GLOBAL_SCAN_ID = extractScanId(scanOutput)
                            if (!GLOBAL_SCAN_ID) {
                                error "❌ No se pudo extraer el Scan ID"
                            }
                            echo "✅ Scan ID capturado: ${GLOBAL_SCAN_ID}"
                            currentBuild.displayName = "#${BUILD_NUMBER} - Scan ${GLOBAL_SCAN_ID}"
                        }
                    }
                }
            }
        }

        stage('Debug Scan ID') {
            steps {
                script {
                    echo "🛠 Debug Scan ID = ${GLOBAL_SCAN_ID}"
                }
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'fod-credentials', usernameVariable: 'FOD_CLIENT_ID', passwordVariable: 'FOD_CLIENT_SECRET')]) {
                        bat """
                        echo Waiting for scan ${GLOBAL_SCAN_ID} to complete...
                        "${FCLI_HOME}\\fcli.exe" fod scan wait-for ${GLOBAL_SCAN_ID} --timeout ${params.SCAN_TIMEOUT_MINUTES}m --fod-session jenkins --store last-scan.json
                        """
                    }
                }
            }
        }

        stage('Validate Scan Results') {
            steps {
                script {
                    if (fileExists('last-scan.json')) {
                        def scanResults = readJSON file: 'last-scan.json'

                        echo "📝 RAW SCAN RESULTS JSON:"
                        echo groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(scanResults))

                        def status = scanResults?.status ?: "Unknown"
                        def criticalCount = (scanResults?.issues?.critical ?: "0").toInteger()
                        def highCount     = (scanResults?.issues?.high ?: "0").toInteger()

                        echo "📊 SCAN RESULTS for ID: ${GLOBAL_SCAN_ID}"
                        echo "   Status: ${status}"
                        echo "   Critical Issues: ${criticalCount}"
                        echo "   High Issues: ${highCount}"

                        if (criticalCount > params.CRITICAL_THRESHOLD.toInteger() || highCount > params.HIGH_THRESHOLD.toInteger()) {
                            error "❌ Scan failed: too many issues"
                        }
                    } else {
                        error "❌ Scan results file not found"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "📋 RESUMEN EJECUCIÓN"
            echo "   Status: ${currentBuild.currentResult}"
            echo "   Scan ID: ${GLOBAL_SCAN_ID ?: 'N/A'}"
            echo "   FoD Portal: ${params.FOD_URL}"

            bat """
                @echo off
                if exist "${FCLI_HOME}\\fcli-windows.zip" del "${FCLI_HOME}\\fcli-windows.zip"
                if exist "${FCLI_HOME}\\fcli.exe" del "${FCLI_HOME}\\fcli.exe"
                if exist scan_output.txt del scan_output.txt
                if exist last-scan.json del last-scan.json
            """
            cleanWs()
        }
        success {
            echo "✅ PIPELINE EXITOSO"
        }
        failure {
            echo "❌ PIPELINE FALLIDO"
        }
    }
}

// Función para extraer Scan ID
def extractScanId(String output) {
    echo "Buscando Scan ID en el output..."
    def lines = output.split('\\r?\\n')
    for (line in lines) {
        if (line.contains('Static') && line.contains('Pending') && line.contains('STARTED')) {
            def parts = line.trim().split('\\s+')
            for (part in parts) {
                if (part.isNumber() && part.length() >= 7) {
                    echo "✅ Scan ID encontrado: ${part}"
                    return part
                }
            }
        }
    }
    return null
}

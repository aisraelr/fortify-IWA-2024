#!/usr/bin/env groovy

// Variable global para persistir el Scan ID entre stages y en post
def GLOBAL_SCAN_ID = ""

pipeline {
    agent any

    parameters {
        booleanParam(name: 'FOD_SAST', defaultValue: true,
            description: 'Run Fortify on Demand SAST scan using fcli')
        string(name: 'FOD_URL', defaultValue: 'https://api.ams.fortify.com',
            description: 'FoD API URL')
        string(name: 'FOD_RELEASE_ID', defaultValue: '1388854',
            description: 'FoD Release ID')
        string(name: 'CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if critical issues exceed this count')
        string(name: 'HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if high issues exceed this count')
        string(name: 'SCAN_TIMEOUT_MINUTES', defaultValue: '120',
            description: 'Timeout in minutes for single wait-for attempt')
        string(name: 'WAIT_RETRIES', defaultValue: '2',
            description: 'Number of additional wait-for retry attempts (after the first one)')
        string(name: 'WAIT_RETRY_DELAY_MINUTES', defaultValue: '2',
            description: 'Minutes to wait between retries')
        //
        string(name: 'OSS_CRITICAL_THRESHOLD', defaultValue: '0',
            description: 'Fail pipeline if OSS critical issues exceed this count')
        string(name: 'OSS_HIGH_THRESHOLD', defaultValue: '10',
            description: 'Fail pipeline if OSS high issues exceed this count')        
    }

    environment {
        APP_NAME       = "IWA-JAVA-2024"
        APP_VERSION    = "Github-2025"
        FOD_CLIENT_ID     = credentials('iwa-fod-client-id')
        FOD_CLIENT_SECRET = credentials('iwa-fod-client-secret')
        GIT_URL        = "https://github.com/aisraelr/fortify-IWA-2024.git"
        GIT_REPO_NAME  = "fortify-IWA-2024"
        // NOTA: no forzamos FCLI_HOME aqu√≠ con env.WORKSPACE porque puede evaluarse vac√≠o al parseo;
        // definimos FCLI_HOME localmente en script{} donde sea necesario.
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.GIT_COMMIT = bat(script: "git rev-parse HEAD", returnStdout: true).trim()
                    env.GIT_BRANCH = bat(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()

                    // Convertir umbrales a enteros para usar despu√©s
                    env.CRITICAL_THRESHOLD_INT = params.CRITICAL_THRESHOLD.toInteger()
                    env.HIGH_THRESHOLD_INT = params.HIGH_THRESHOLD.toInteger()
                    env.SCAN_TIMEOUT_MINUTES_INT = params.SCAN_TIMEOUT_MINUTES.toInteger()
                }
            }
        }

        stage('Build') {
            steps {
                bat "mvn clean package -DskipTests"
                archiveArtifacts artifacts: "target/*.jar", fingerprint: true
            }
        }

        stage('Prepare fcli') {
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                    // Crear carpeta y descargar si no existe
                    bat """
                        @echo off
                        if not exist "${FCLI_HOME}" mkdir "${FCLI_HOME}"
                        if not exist "${FCLI_HOME}\\fcli.exe" (
                            echo [INFO] Descargando fcli...
                            curl -L https://github.com/fortify/fcli/releases/download/v3.8.1/fcli-windows.zip -o "${FCLI_HOME}\\fcli-windows.zip"
                            tar -xf "${FCLI_HOME}\\fcli-windows.zip" -C "${FCLI_HOME}" fcli.exe
                        ) else (
                            echo [INFO] fcli.exe ya existe en ${FCLI_HOME}
                        )
                    """
                }
            }
        }



        stage('Prepare OSS Package') {
            steps {
                script {
                    bat """
                        @echo off
                        echo [INFO] Generando paquete OSS con ScanCentral...
                        if exist oss-scan.zip del oss-scan.zip
                        scancentral.bat package -bt mvn -oss -o oss-scan.zip

                        echo [INFO] Respaldando oss-scan.zip en C:\\
                        copy /Y oss-scan.zip C:\\oss-scan.zip
                    """
                }
            }
        }

        stage('FoD OSS Scan') {
            steps {
                script {
                    def FCLI_HOME = "${env.WORKSPACE}\\fcli"

                    withCredentials([
                        string(credentialsId: 'iwa-fod-client-id', variable: 'FOD_CLIENT_ID'),
                        string(credentialsId: 'iwa-fod-client-secret', variable: 'FOD_CLIENT_SECRET')
                    ]) {
                        bat """
                            @echo off
                            echo [INFO] Logging into FoD for OSS Scan...
                            "${FCLI_HOME}\\fcli.exe" fod session login --client-id "%FOD_CLIENT_ID%" --client-secret "%FOD_CLIENT_SECRET%" --url "${params.FOD_URL}" --fod-session jenkins

                            echo [INFO] Starting OSS Scan...
                            "${FCLI_HOME}\\fcli.exe" fod oss-scan start --rel "${params.FOD_RELEASE_ID}" --file "oss-scan.zip" --fod-session jenkins --output json > oss-scan-output.json

                            echo [INFO] Logging out...
                            "${FCLI_HOME}\\fcli.exe" fod session logout --fod-session jenkins
                        """

                        if (fileExists('oss-scan-output.json')) {
                            def ossResults = readFile('oss-scan-output.json')
                            echo "OSS Scan Output:\n${ossResults}"
                        } else {
                            echo "‚ö†Ô∏è No se gener√≥ oss-scan-output.json"
                        }
                    }
                }
            }
        }        

    }

    post {
        always {
            script {
                def FCLI_HOME = "${env.WORKSPACE}\\fcli"
                echo "üìã RESUMEN EJECUCI√ìN"
                echo "   Status: ${currentBuild.currentResult}"
                echo "   Scan ID: ${GLOBAL_SCAN_ID ?: 'N/A'}"
                echo "   FoD Portal: ${params.FOD_URL}"

                // Mostrar last-scan.json por si existe (√∫til para debugging)
                if (fileExists('last-scan.json')) {
                    echo "===== last-scan.json (resumen) ====="
                    def txt = readFile('last-scan.json')
                    echo txt
                }

                // Limpieza segura
                bat """
                    @echo off
                    if exist "${FCLI_HOME}\\fcli-windows.zip" del "${FCLI_HOME}\\fcli-windows.zip"
                    if exist "${FCLI_HOME}\\fcli.exe" del "${FCLI_HOME}\\fcli.exe"
                    if exist scan_output.txt del scan_output.txt
                    if exist last-scan.json del last-scan.json
                """
                cleanWs()
            }
        }

        success {
            echo "‚úÖ PIPELINE EXITOSO"
        }

        failure {
            echo "‚ùå PIPELINE FALLIDO"
        }
    }
}

// Funci√≥n para extraer Scan ID (robusta)
def extractScanId(String output) {
    echo "Buscando Scan ID en el output..."
    if (!output) return null
    def lines = output.split('\\r?\\n')
    for (line in lines) {
        if (line?.toLowerCase()?.contains('static') && line?.toLowerCase()?.contains('pending')) {
            def parts = line.trim().split('\\s+')
            for (part in parts) {
                if (part?.isNumber() && part.length() >= 7) {
                    echo "‚úÖ Scan ID encontrado: ${part}"
                    return part.toString().trim()
                }
            }
        }
    }
    // fallback: cualquier n√∫mero de 7+ d√≠gitos
    def fallback = (output =~ /\\b(\\d{7,})\\b/)
    if (fallback.find()) {
        echo "‚úÖ Scan ID (fallback) encontrado: ${fallback.group(1)}"
        return fallback.group(1)
    }
    echo "‚ùå No se encontr√≥ Scan ID"
    return null
}
